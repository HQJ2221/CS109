public class staticMethod {
    public static void main(String[] args) {
        //静态方法：不依赖于对象的方法，可以直接通过类名调用
        //类的每个对象都有该类所有实例变量的副本,实例变量表示每个实例唯一的概念
        //在特定情况下,可能需要一个类的所有实例共享一个变量,这种变量称为类变量
        //静态变量表示类范围的信息。类的所有对象共享同一条数据。
        //每个静态变量只有一个副本。当类的所有对象必须使用该变量的相同副本时，使变量为静态变量。
        //一个静态方法不能访问非静态变量，因为非静态变量属于对象，而静态方法不属于对象。
        //实例方法可以访问静态类成员，但不能以其他方式访问
        //Set方法也称为mutator方法，因为它们通常通过修改实例变量的值来更改对象的状态。
        //Get方法也称为accessor方法，因为它们通常返回实例变量的值。

        //封装
        // 封装是面向对象编程的一个重要特征，其他三个继承、多态、抽象都是基于封装的。
        // 它是指将数据和操作数据的方法绑定在一起，将数据隐藏在类的内部，不允许外部程序直接访问数据，而是通过类提供的方法来访问数据。
        // 封装的好处是可以隐藏类的实现细节，只需要知道类的功能和使用方法即可，不需要知道类的内部实现细节。
        // 如果实例变量被声明为私有，则公共get方法肯定允许其他方法访问它，但get方法能够控制对实例变量的访问。
        // 公共set方法应该在set方法中检查参数的有效性，以确保实例变量的值始终保持有效。

        //最小化访问权限
        // 一个类的实例变量应该是私有的，这样可以确保只有类的方法才能访问它们。
        // 代码应仅授予完成其指定任务所需的特权和访问权限，但仅此而已。
    }
}